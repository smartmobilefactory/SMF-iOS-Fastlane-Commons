$FASTLANE_COMMONS_FOLDER_NAME = ".SMF-iOS-Fastlane-Commons"
$METAJSON_TEMP_FOLDERNAME = ".MetaJSON-temp"

#################
### Lifecycle ###
#################

before_all do

  # Clone the Commons Repo
  smf_remove_fastlane_commons_repo
  smf_clone_fastlane_commons_repo

  # Import the splitted Fastlane classes
  require_all "#{$FASTLANE_COMMONS_FOLDER_NAME}/Fastlane/flow"
  require_all "#{$FASTLANE_COMMONS_FOLDER_NAME}/Fastlane/steps"
  require_all "#{$FASTLANE_COMMONS_FOLDER_NAME}/Fastlane/utils"

  # Load the Fastlane config from the disk into memory
  smf_load_fastlane_config
end

after_all do
  smf_remove_fastlane_commons_repo
end

error do |lane, exception|
  if ENV["SMF_SHOULD_SEND_DEPLOY_FAILURE_NOTIFICATIONS"] == "true"
    project_config = @smf_fastlane_config["project"]

    # Create the release title with the framework config if it's a framework
    framework_identifier = ENV["SMF_FRAMEWORK_IDENTIFIER"]
    release_title = nil
    if framework_identifier
      release_title = smf_default_pod_notification_release_title(project_config["project_name"], @smf_fastlane_config["framework"][framework_identifier])
    end

    smf_handle_exception(
      build_variant: ENV["SMF_BUILD_VARIANT"],
      project_config: project_config,
      release_title: release_title,
      exception: exception,
      )
  end
end

##############
### Helper ###
##############

def require_all(path)
  Dir["#{path}/*.rb"].each { |file| 
    fastlane_require file 
  }
end

private_lane :smf_clone_fastlane_commons_repo do
  fastlane_commons_branch = @smf_fastlane_config["project"]["fastlane_commons_branch"]
  sh "git clone -b \"" + fastlane_commons_branch + "\" git@github.com:smartmobilefactory/SMF-iOS-Fastlane-Commons.git #{$FASTLANE_COMMONS_FOLDER_NAME}"
end

private_lane :smf_remove_fastlane_commons_repo do
  sh "if [ -d #{$FASTLANE_COMMONS_FOLDER_NAME} ]; then rm -rf #{$FASTLANE_COMMONS_FOLDER_NAME}; fi"
end
