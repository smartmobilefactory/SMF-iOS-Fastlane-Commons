
"BUNDLE_IDENTIFIER_KEY" = "BUNDLE_IDENTIFIER"
"SCHEME_NAME_KEY" = "SCHEME_NAME"
"HOCKEY_ID_KEY" = "HOCKEY_ID"
"CODE_SIGNING_IDENTITY_KEY" = "CODE_SIGNING_IDENTITY"

###################
### archive_ipa ###
###################

desc "Build the project based on the build type."
private_lane :archive_ipa do |options|

  app_identifier = options[:target_config["BUNDLE_IDENTIFIER"]]
  scheme = options[:target_config["SCHEME_NAME"]]
  ipa_filename = "#{options[:target_config["SCHEME_NAME"]]}"
  codesigning_identity = options[:target_config["CODE_SIGNING_IDENTITY"]]

  UI.important("Build a new version")

  unlock_keychain(path: "login.keychain", password: ENV["LOGIN"])

  sigh(
    skip_certificate_verification:true,
    app_identifier: app_identifier
    )

  nlock_keychain(path: "jenkins.keychain", password: ENV["JENKINS"])

  gym(
    clean: true,
    workspace: "Baur.xcworkspace",
    scheme: scheme,
    configuration: 'Release',
    codesigning_identity: codesigning_identity,
    output_directory: "build",
    archive_path:"build/",
    output_name: ipa_filename     
    )
end


#########################
### collect_changelog ###
#########################

desc "Collect git commit messages and author mail adressex into a changelog and store them as environmental varibles."
private_lane :collect_changelog do |options|

  buildVariant = options[:buildVariant]

  UI.important("collect commits back to the last tag")

  case buildVariant 
  when "Alpha"
    ENV["CHANGELOG"] =  changelog_from_git_commits(include_merges: false, pretty: '- (%an) %s')
    ENV["EMAIL"] = changelog_from_git_commits( include_merges: false, pretty: '%ae')
  else
    
    if TARGETS_DICT.key?(buildVariant)
      ENV["CHANGELOG"] =  changelog_from_git_commits(tag_match_pattern: '*#{buildVariant}*',include_merges: false, pretty: '- (%an) %s')
      ENV["EMAIL"] = changelog_from_git_commits(tag_match_pattern: '*#{buildVariant}*',include_merges: false, pretty: '%ae')
    else
      puts "No valid target"
    end
  
  end

end


###################################
### disable_former_hockey_entry ###
###################################

desc "Disable the downlaod of the former app version on HockeyApp - does not apply for Alpha builds."
private_lane :disable_former_hockey_entry do |options|

  hockeyAppId = options[:hockeyAppId]
  buildVariant = options[:buildVariant]

  # Disable the download of the former non Alpha app on Hockey App
  if (buildVariant != "Alpha") && (Actions.lane_context[Actions::SharedValues::HOCKEY_BUILD_INFORMATION]['id'] > 1)
    previous_version_id  = Actions.lane_context[Actions::SharedValues::HOCKEY_BUILD_INFORMATION]['id'] - 1

    UI.important("HERE IS THE ID OF THE Current VERSION #{Actions.lane_context[Actions::SharedValues::HOCKEY_BUILD_INFORMATION]['id']}")
    UI.important("HERE IS THE ID OF THE Previous VERSION #{previous_version_id}")

    disable_hockey_download(
      api_token: ENV["HOCKEYAPP_API_TOKEN"],
      public_identifier: hockeyAppId,
      version_id: "#{previous_version_id}"
      )
  end

  clean_build_artifacts

end


##########################
### generate_meta_json ###
##########################

desc "Create and push the metaJSON files - applys only for Alpha builds."
private_lane :generate_meta_json do |options|

  buildVariant = options[:buildVariant]
  branch = options[:branch]

  if buildVariant == "Alpha"
    desc "Create the meta JSON files"
    sh "cd .. && Submodules/SMF-iOS-CommonProjectSetupFiles/MetaJSON/update-and-push-meta-jsons.sh \"#{branch}\" || true"
  end

end


##############################
### increment_build_number ###
##############################

desc "Increment and push the build number."
private_lane :increment_build_number do |options|

  buildVariant = options[:buildVariant]
  branch = options[:branch]

  UI.important("Increment Build Version Code")

  clean_build_artifacts

  version = get_build_number(xcodeproj: "#{PROJECT_NAME}.xcodeproj")
  puts version

  commit_version_bump(
    xcodeproj: "#{PROJECT_NAME}.xcodeproj",
    message: "Increment build number to #{version}"
    )

  # Tag the increment build number commit
  if git_tag_exists(tag: "build/"+buildVariant+"_b"+version)
    UI.message("Git tag already existed")
  else
    add_git_tag(
      tag: "build/"+buildVariant+"_b"+version
      )
  end
    
  push_to_git_remote(
    remote: 'origin',
    local_branch: branch,
    remote_branch: branch,
    force: false,
    tags: true
    )

  clean_build_artifacts

end


##########################
### notify_via_hipchat ###
##########################

desc "Post to a HipChat room if the build was successful"
private_lane :notify_via_hipchat do |options|

  room = options[:room]
  api_token = options[:api_token]

  hipchat(
    message: "#{PROJECT_NAME} successfully released version #{get_build_number}!",
    channel: room,
    success: true,
    api_token: api_token,
    notify_room: true,
    version: "2"
  )

end


#######################
### notify_via_mail ###
#######################

desc "Send emails to all collaborators who worked on the project since the last build to inform about successfully or failing build jobs."
private_lane :notify_via_mail do |options|

  authors_email = options[:authors_email]
  success = options[:success]
  case success
  when true
    subject = "#{PROJECT_NAME} realeased successfully #{get_build_number}"
    message = "#{PROJECT_NAME} have a new version #{get_build_number} ðŸŽ‰ðŸŽ‰ðŸŽ‰"
  else
    subject = "#{PROJECT_NAME} failed"
    message = "#{PROJECT_NAME} failed to upload a new version ðŸ˜¢ðŸ˜¢ðŸ˜¢"
  end

  authors_email.each do |c|
    mailgun(
      subject: subject,
      postmaster:"postmaster@mailgun.smfhq.com",
      apikey: "key-74595c7e3dbbab1e25af00bea08571b8",
      to: c,
      success: success,
      message: message,
      app_link: Actions.lane_context[Actions::SharedValues::HOCKEY_DOWNLOAD_LINK],
      ci_build_link: ENV["BUILD_URL"]
      )
  end

end


############################
### upload_ipa_to_hockey ###
############################

desc "Clean, build and release the app on HockeyApp"
private_lane :upload_ipa_to_hockey do |options|

  hockeyAppId = options[:hockeyAppId]
  buildVariant = options[:buildVariant]


  UI.important("Upload a new build to HockeyApp")
  #Print .ipa path
  puts "IPA: "+lane_context[SharedValues::IPA_OUTPUT_PATH]+"".green

  hockey(
    api_token: ENV["HOCKEYAPP_API_TOKEN"],
    ipa: lane_context[SharedValues::IPA_OUTPUT_PATH],
    notify: "0",
    notes: ENV["CHANGELOG"],
    public_identifier: hockeyAppId
    )

  clean_build_artifacts

end
