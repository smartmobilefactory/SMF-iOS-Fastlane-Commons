

#######################
### smf_archive_ipa ###
#######################

desc "Build the project based on the build type."
private_lane :smf_archive_ipa do |options|

  UI.important("Build a new version")

  unlock_keychain(path: "login.keychain", password: ENV["LOGIN"])

  sigh(
    skip_certificate_verification:true,
    app_identifier: options[:build_variant_config]["BUNDLE_IDENTIFIER"]
    )

  unlock_keychain(path: "jenkins.keychain", password: ENV["JENKINS"])

  gym(
    clean: true,
    workspace: "#{options[:build_variant_config]["PROJECT_NAME"]}.xcworkspace",
    scheme: options[:build_variant_config]["SCHEME_NAME"],
    configuration: 'Release',
    codesigning_identity: options[:build_variant_config]["CODE_SIGNING_IDENTITY"],
    output_directory: "build",
    archive_path:"build/",
    output_name: "#{options[:build_variant_config]["SCHEME_NAME"]}"     
    )
end


#############################
### smf_collect_changelog ###
#############################

desc "Collect git commit messages and author mail adressex into a changelog and store them as environmental varibles."
private_lane :smf_collect_changelog do |options|

  build_variant_config = options[:build_variant_config]
  build_variant = build_variant_config["BUILD_VARIANT_NAME"]

  UI.important("collect commits back to the last tag")

  if build_variant.include? "Alpha"
    ENV["CHANGELOG"] =  changelog_from_git_commits(include_merges: false, pretty: '- (%an) %s')
    ENV["EMAIL"] = changelog_from_git_commits( include_merges: false, pretty: '%ae')
  else
    ENV["CHANGELOG"] =  changelog_from_git_commits(tag_match_pattern: '*#{build_variant}*',include_merges: false, pretty: '- (%an) %s')
    ENV["EMAIL"] = changelog_from_git_commits(tag_match_pattern: '*#{build_variant}*',include_merges: false, pretty: '%ae')
  end

end


#######################################
### smf_disable_former_hockey_entry ###
#######################################

desc "Disable the downlaod of the former app version on HockeyApp - does not apply for Alpha builds."
private_lane :smf_disable_former_hockey_entry do |options|

  build_variant_config = options[:build_variant_config]
  build_variant = build_variant_config["BUILD_VARIANT_NAME"]

  # Disable the download of the former non Alpha app on Hockey App
  if not build_variant.include? "Alpha"
    if (Actions.lane_context[Actions::SharedValues::HOCKEY_BUILD_INFORMATION]['id'] > 1)
      previous_version_id  = Actions.lane_context[Actions::SharedValues::HOCKEY_BUILD_INFORMATION]['id'] - 1

      UI.important("HERE IS THE ID OF THE Current VERSION #{Actions.lane_context[Actions::SharedValues::HOCKEY_BUILD_INFORMATION]['id']}")
      UI.important("HERE IS THE ID OF THE Previous VERSION #{previous_version_id}")

      disable_hockey_download(
        api_token: ENV["HOCKEYAPP_API_TOKEN"],
        public_identifier: build_variant_config["HOCKEY_ID"],
        version_id: "#{previous_version_id}"
        )
    end
  end
end


##############################
### smf_generate_meta_json ###
##############################

desc "Create and push the metaJSON files - applys only for Alpha builds."
private_lane :smf_generate_meta_json do |options|

  build_variant = options[:build_variant_config]["BUILD_VARIANT_NAME"]
  branch = options[:branch]

  if build_variant.include? "Alpha"
    desc "Create the meta JSON files"
    sh "cd .. && Submodules/SMF-iOS-CommonProjectSetupFiles/MetaJSON/update-and-push-meta-jsons.sh \"#{branch}\" || true"
  end

end


#############################
### smf_push_build_number ###
#############################

desc "Commit and push the build number."
private_lane :smf_push_build_number do |options|

  build_variant_config = options[:build_variant_config]
  build_variant = build_variant_config["BUILD_VARIANT_NAME"]
  project_name = build_variant_config["PROJECT_NAME"]
  branch = options[:branch]

  UI.important("Increment Build Version Code")

  version = get_build_number(xcodeproj: "#{project_name}.xcodeproj")
  puts version

  commit_version_bump(
    xcodeproj: "#{project_name}.xcodeproj",
    message: "Increment build number to #{version}"
    )

  # Tag the increment build number commit
  if git_tag_exists(tag: "build/"+build_variant+"_b"+version)
    UI.message("Git tag already existed")
  else
    add_git_tag(
      tag: "build/"+build_variant+"_b"+version
      )
  end
    
  push_to_git_remote(
    remote: 'origin',
    local_branch: branch,
    remote_branch: branch,
    force: false,
    tags: true
  )

end


##############################
### smf_notify_via_hipchat ###
##############################

desc "Post to a HipChat room if the build was successful"
private_lane :smf_notify_via_hipchat do |options|

  project_name = options[:project_name]

  room = options[:room]

  hipchat(
    message: "#{project_name} successfully released version #{get_build_number}!",
    channel: room,
    success: true,
    api_token: ENV["HIPCHAT_API_TOKEN"],
    notify_room: true,
    version: "2"
  )

end


###########################
### smf_notify_via_mail ###
###########################

desc "Send emails to all collaborators who worked on the project since the last build to inform about successfully or failing build jobs."
private_lane :smf_notify_via_mail do |options|

  project_name = options[:project_name]

  authors_email = options[:authors_email]
  success = options[:success]

  case success
  when true
    subject = "#{project_name} realeased successfully #{get_build_number}"
    message = "#{project_name} have a new version #{get_build_number} ðŸŽ‰ðŸŽ‰ðŸŽ‰"
  else
    subject = "#{project_name} failed"
    message = "#{project_name} failed to upload a new version ðŸ˜¢ðŸ˜¢ðŸ˜¢"
  end

  authors_email.each do |c|
    mailgun(
      subject: subject,
      postmaster:"postmaster@mailgun.smfhq.com",
      apikey: ENV["MAILGUN_KEY"],
      to: c,
      success: success,
      message: message,
      app_link: Actions.lane_context[Actions::SharedValues::HOCKEY_DOWNLOAD_LINK],
      ci_build_link: ENV["BUILD_URL"]
      )
  end

end


################################
### smf_upload_ipa_to_hockey ###
################################

desc "Clean, build and release the app on HockeyApp"
private_lane :smf_upload_ipa_to_hockey do |options|

  hockey_app_id = options[:build_variant_config]["HOCKEY_ID"]

  UI.important("Upload a new build to HockeyApp")

  puts "IPA: "+lane_context[SharedValues::IPA_OUTPUT_PATH]+"".green

  hockey(
    api_token: ENV["HOCKEYAPP_API_TOKEN"],
    ipa: lane_context[SharedValues::IPA_OUTPUT_PATH],
    notify: "0",
    notes: ENV["CHANGELOG"],
    public_identifier: hockey_app_id
    )

  clean_build_artifacts

end
