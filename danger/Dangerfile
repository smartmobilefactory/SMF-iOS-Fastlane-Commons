############################
###### General config ######
############################

ENV['BUILD_VARIANT'] == nil ? build_variant = "" : build_variant = ENV['BUILD_VARIANT']
ENV['BUILD_TYPE'] == nil ? build_type = "targets" : build_type = ENV['BUILD_TYPE']

@project_danger_config = nil
@commons_danger_config = nil

danger_info_message = ""
danger_info_message += "Danger configuration:"
danger_info_message += "<br /><br />Analysing build variant **#{build_variant}** of build type **#{build_type}**"

if File.file?('fastlane/BuildVariants.json')
  fastlane_config = JSON.parse(File.read('fastlane/BuildVariants.json'))
  build_variant_config = fastlane_config[build_type][build_variant]
  target_depended_config = fastlane_config[build_type][build_variant]["danger_config_name"]
  if target_depended_config
    @project_danger_config = fastlane_config[target_depended_config]
  else
    @project_danger_config = fastlane_config["danger_config"]
  end
else
  fail "./fastlane doesn't contain BuildVariants.json"
end

if File.file?("fastlane/#{ENV['FASTLANE_COMMONS_FOLDER']}/danger/danger_defaults.json")
  @commons_danger_config = JSON.parse(File.read("fastlane/#{ENV['FASTLANE_COMMONS_FOLDER']}/danger/danger_defaults.json"))
  if @commons_danger_config.nil?
      fail "The default Danger config is nil"
  end
else
  fail "The Fastlane commons repo doesn't contain danger/danger_defaults.json"
end

###################
##### Helpers #####
###################

def get_config_value(key)
  if @project_danger_config != nil && @project_danger_config[key] != nil
    return @project_danger_config[key]
  else
    if @commons_danger_config == nil
      return nil
    else
      return @commons_danger_config[key]
    end
  end
end

#####################
###### General ######
#####################

if get_config_value("github.pr.big_length.use_feature")
  if git.lines_of_code > get_config_value("github.pr.big_length.lines_of_code")
    warn("There amount of changed code is huge (#{git.lines_of_code} lines). Please try to create many small pull requests instead of a few big ones!")
  end
  danger_info_message += "<br /><br />GitHub PR length is **enabled***<br />- lines_of_code: **#{get_config_value("github.pr.big_length.lines_of_code")}***"
else
  danger_info_message += "<br /><br />GitHub PR length is **disabled**"
end

###################
###### Xcode ######
###################

if get_config_value("xcode_build_warnings.use_feature")
  xcode_summary.report 'build/reports/errors.json'
  danger_info_message += "<br /><br />Xcode warnings are **enabled**"
else
  danger_info_message += "<br /><br />Xcode warnings are **disabled**"
end

#######################
###### Swiftlint ######
#######################

if get_config_value("swiftlint.use_feature")
  # Use the SwiftLint Pod if available. Otherwise the SwiftLint version from the Danger plugin is used.
  fail_on_error = get_config_value("swiftlint.fail_on_error")
  pods_swiftlint_binary = "Pods/SwiftLint/swiftlint"
  if File.file?(pods_swiftlint_binary)
    swiftlint.binary_path = pods_swiftlint_binary
    binary_message_string = pods_swiftlint_binary
  else
    binary_message_string = "Danger SwiftLint Plugin version"
  end


  # Run SwiftLint 
  if fail_on_error
    swiftlint.lint_files fail_on_error: true
  else
    swiftlint.lint_files
  end
  
  danger_info_message += "<br /><br />SwiftLint is **enabled***<br />- binary: **#{binary_message_string}**,<br />- fail_on_error: **#{fail_on_error}***")
else
  danger_info_message += "<br /><br />SwiftLint is **disabled**")
end

#####################
###### Slather ######
#####################

if get_config_value("code_coverage.slather.use_feature")
  if build_variant_config["perform_unit_tests"]
    slather.configure(fastlane_config["project"]["project_name"] + ".xcodeproj", build_variant_config["scheme"], options: {
      workspace: fastlane_config["project"]["project_name"] + ".xcworkspace",
      output_directory: 'build/reports',
    })

    min_total_coverage = get_config_value("code_coverage.slather.notify_if_coverage_is_less_than").to_i
    min_file_coverage = get_config_value("code_coverage.slather.notify_if_modified_file_is_less_than").to_i
    notify_level_string = get_config_value("code_coverage.slather.notify_level")
    notify_level = notify_level_string == "warn" ? :warn : :fail

    slather.notify_if_coverage_is_less_than(minimum_coverage: min_total_coverage, notify_level: notify_level)
    slather.notify_if_modified_file_is_less_than(minimum_coverage: min_file_coverage, notify_level: notify_level)
    slather.show_coverage

    danger_info_message += "<br /><br />Slather is **enabled***<br />- notify_if_coverage_is_less_than: **#{min_total_coverage}**<br />- notify_if_modified_file_is_less_than: **#{min_file_coverage}**<br />- notify_level: **#{notify_level_string}***")
  else
    danger_info_message += "<br /><br />Slather is **disabled** as unit tests shouldn't be runned")
  end
else
  warn("Slather is **disabled**")
end

message(danger_info_message)

